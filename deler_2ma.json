// https://stackoverflow.com/questions/59467508/uploading-image-to-github-via-api-in-node-js
// https://raw.githubusercontent.com/qrv/bildeler-json/master/deler.json
// https://stackoverflow.com/questions/61553399/how-can-i-save-a-valid-image-to-github-using-their-api
// https://stackoverflow.com/questions/26678198/how-to-upload-assets-to-a-github-release-from-node-js

const fs = require('fs');
const path = require('path');
const util = require('util');

const readFilePromise = util.promisify(fs.readFile);

// API client for working with GitHub data using promises
const { Octokit } = require('@octokit/rest');

const token = process.env['0f67969336006b54ca7159fa4f1d5544fedb79ef'];

if (token == null) {
    console.error('Expected GITHUB_TOKEN environment variable to create repository. Exiting...');
    process.exit(-1);
}

async function run() {
    const octokit = new Octokit({
        auth: token,
        log: console,
    });

    // change these values to create the test repository under your account
    const owner = 'qrv';
    const repo = 'upload-an-image-test-repo';

    await octokit.repos.createForAuthenticatedUser({
        name: repo,
        description: 'testing uploading an image through the GitHub API',
    });

    // ensure that you are reading the file from disk as binary before converting
    // to base64
    const imagePath = path.join(__dirname, 'example.png');
    const bytes = await readFilePromise(imagePath, 'binary');
    const buffer = Buffer.from(bytes, 'binary');
    const content = buffer.toString('base64');

    // TODO: updating file requires providing the SHA of existing blob
    //       this is not currently supported
    const result = await octokit.repos.createOrUpdateFile({
        owner,
        repo,
        message: 'Adding an image to the repository',
        path: 'example.png',
        content,
    });

    console.log(`Created commit at ${result.data.commit.html_url}`);
}

run().catch((err) => {
    console.error(err, err.stack);
});
